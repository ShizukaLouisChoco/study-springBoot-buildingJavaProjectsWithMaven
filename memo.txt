Building Java Projects with Maven
    This guide walks you through using Maven to build a simple Java project.

What you’ll build
    You’ll create an application that provides the time of day and then build it with Maven.

Download the project
    git clone https://github.com/spring-guides/gs-maven.git
    cd initial
    mvn -v
        Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)
         Maven home: /usr/local/Cellar/maven/3.8.6/libexec
         Java version: 18.0.2.1, vendor: Homebrew, runtime: /usr/local/Cellar/openjdk/18.0.2.1/libexec/openjdk.jdk/Contents/Home
         Default locale: en_FR, platform encoding: UTF-8
         OS name: "mac os x", version: "12.2.1", arch: "x86_64", family: "mac"
    cd ..
    cd complete
    mvn -v
        Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)
        Maven home: /usr/local/Cellar/maven/3.8.6/libexec
        Java version: 18.0.2.1, vendor: Homebrew, runtime: /usr/local/Cellar/openjdk/18.0.2.1/libexec/openjdk.jdk/Contents/Home
        Default locale: en_FR, platform encoding: UTF-8
        OS name: "mac os x", version: "12.2.1", arch: "x86_64", family: "mac"
1) Set up the project
    First you’ll need to setup a Java project for Maven to build. To keep the focus on Maven, make the project as simple as possible for now. Create this structure in a project folder of your choosing.

2) Create the directory structure
    In a project directory of your choosing, create the following subdirectory structure; for example, with mkdir -p src/main/java/hello on nix systems
    |
    --src
       |
       --main
           |
           --java
               |
               --hello
    within the src/main/java/hello directory, you can create any Java classes you want
    To maintain consistency with the rest of this guide, create these two classes:
    HelloWorld.java and Greeter.java

    Now that you have a project that is ready to be built with Maven, the next step is to install Maven

    Maven is downloadable as a zip file at
    https://maven.apache.org/download.cgi. Only the binaries are required, so look for the link to apache-maven-{version}-bin.zip or apache-maven-{version}-bin.tar.gz.

    Once you have downloaded the zip file, unzip it to your computer. Then add the bin folder to your path.

    To test the Maven installation, run mvn from the command-line:

    mvn -v
    If all goes well, you should be presented with some information about the Maven installation. It will look similar to (although perhaps slightly different from) the following:

    Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T16:41:47+00:00)
    Maven home: /home/dsyer/Programs/apache-maven
    Java version: 1.8.0_152, vendor: Azul Systems, Inc.
    Java home: /home/dsyer/.sdkman/candidates/java/8u152-zulu/jre
    Default locale: en_GB, platform encoding: UTF-8
    OS name: "linux", version: "4.15.0-36-generic", arch: "amd64", family: "unix"
    Congratulations! You now have Maven installed.

    INFO: You might like to consider using the Maven wrapper to insulate your developers against having the correct version of Maven, or having to install it at all. Projects downloaded from Spring Initializr have the wrapper included. It shows up as a script mvnw in the top level of your project which you run in place of mvn.

3) Define a simple Maven build
    Now that Maven is installed, you need to create a Maven project definition. Maven projects are defined with an XML file named pom.xml. Among other things, this file gives the project’s name, version, and dependencies that it has on external libraries.

    Create a file named pom.xml at the root of the project (i.e. put it next to the src folder) and give it the following contents:

    With the exception of the optional <packaging> element, this is the simplest possible pom.xml file necessary to build a Java project. It includes the following details of the project configuration:
        <modelVersion>. POM model version (always 4.0.0).
        <groupId>. Group or organization that the project belongs to. Often expressed as an inverted domain name.
        <artifactId>. Name to be given to the project’s library artifact (for example, the name of its JAR or WAR file).
        <version>. Version of the project that is being built.
        <packaging> - How the project should be packaged. Defaults to "jar" for JAR file packaging. Use "war" for WAR file packaging.
    *When it comes to choosing a versioning scheme, Spring recommends the semantic versioning approach.
    At this point you have a minimal, yet capable Maven project defined.


